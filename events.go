// This file was auto-generated by Fern from our API Definition.

package intrinsic

import (
	json "encoding/json"
	fmt "fmt"
	core "github.com/intrinsic-org/intrinsic-go/core"
	time "time"
)

// JSON payload for the request body
type CreateEventAsyncRequest = map[string]interface{}

type CreateEventAsyncResponse struct {
	// ID of the created event
	ID string `json:"id" url:"id"`
	// ID of the event type that was created
	EventTypeID string `json:"event_type_id" url:"event_type_id"`
	// Arbitrary JSON payload for the request body
	Content map[string]interface{} `json:"content,omitempty" url:"content,omitempty"`
	// Timestamp of when the event was created
	CreatedAt time.Time `json:"created_at" url:"created_at"`
	// List of pending detection ids created for the event
	Detections []*DetectionObject `json:"detections,omitempty" url:"detections,omitempty"`
	// List of fired rules created for the event
	FiredRules []*FiredRuleObject `json:"fired_rules,omitempty" url:"fired_rules,omitempty"`
	object     string

	_rawJSON json.RawMessage
}

func (c *CreateEventAsyncResponse) Object() string {
	return c.object
}

func (c *CreateEventAsyncResponse) UnmarshalJSON(data []byte) error {
	type embed CreateEventAsyncResponse
	var unmarshaler = struct {
		embed
		CreatedAt *core.DateTime `json:"created_at"`
	}{
		embed: embed(*c),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*c = CreateEventAsyncResponse(unmarshaler.embed)
	c.CreatedAt = unmarshaler.CreatedAt.Time()
	c.object = "event"
	c._rawJSON = json.RawMessage(data)
	return nil
}

func (c *CreateEventAsyncResponse) MarshalJSON() ([]byte, error) {
	type embed CreateEventAsyncResponse
	var marshaler = struct {
		embed
		CreatedAt *core.DateTime `json:"created_at"`
		Object    string         `json:"object"`
	}{
		embed:     embed(*c),
		CreatedAt: core.NewDateTime(c.CreatedAt),
		Object:    "event",
	}
	return json.Marshal(marshaler)
}

func (c *CreateEventAsyncResponse) String() string {
	if len(c._rawJSON) > 0 {
		if value, err := core.StringifyJSON(c._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

// Arbitrary JSON payload for the request body
type CreateEventSyncRequest = map[string]interface{}

type CreateEventSyncResponse struct {
	// ID of the created event
	ID string `json:"id" url:"id"`
	// ID of the event type that was created
	EventTypeID string `json:"event_type_id" url:"event_type_id"`
	// Arbitrary JSON payload for the request body
	Content map[string]interface{} `json:"content,omitempty" url:"content,omitempty"`
	// Timestamp of when the event was created
	CreatedAt time.Time `json:"created_at" url:"created_at"`
	// List of detections created for the event
	Detections []*DetectionObject `json:"detections,omitempty" url:"detections,omitempty"`
	// List of fired rules created for the event
	FiredRules []*FiredRuleObject `json:"fired_rules,omitempty" url:"fired_rules,omitempty"`
	object     string

	_rawJSON json.RawMessage
}

func (c *CreateEventSyncResponse) Object() string {
	return c.object
}

func (c *CreateEventSyncResponse) UnmarshalJSON(data []byte) error {
	type embed CreateEventSyncResponse
	var unmarshaler = struct {
		embed
		CreatedAt *core.DateTime `json:"created_at"`
	}{
		embed: embed(*c),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*c = CreateEventSyncResponse(unmarshaler.embed)
	c.CreatedAt = unmarshaler.CreatedAt.Time()
	c.object = "event"
	c._rawJSON = json.RawMessage(data)
	return nil
}

func (c *CreateEventSyncResponse) MarshalJSON() ([]byte, error) {
	type embed CreateEventSyncResponse
	var marshaler = struct {
		embed
		CreatedAt *core.DateTime `json:"created_at"`
		Object    string         `json:"object"`
	}{
		embed:     embed(*c),
		CreatedAt: core.NewDateTime(c.CreatedAt),
		Object:    "event",
	}
	return json.Marshal(marshaler)
}

func (c *CreateEventSyncResponse) String() string {
	if len(c._rawJSON) > 0 {
		if value, err := core.StringifyJSON(c._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}
